/** An end-to-end test of the cello compiler */

type Foo = struct {
  a: i32,
  b: i32,
  fn add = () -> i32 {
    a + b
  }
}

type int = i32

fn three = () -> int 3;

fn get_foo_ptr = (f: &Foo) -> &Foo f

fn deref = (a: &i32) -> i32 a.*

fn get_foo_a = (f: &Foo) -> i32 f.a

fn add_foo = (f: &Foo) -> i32 f.a + f.b

fn clone_foo = (foo: &Foo, target: &Foo) {
  target.a = foo.a;
  target.b = foo.b;
}

fn factorial = (a: i32) -> i32 {
  if a == 1 { 1 }
  elif a == 0 { 1 }
  else { a * factorial(a-1) }
}

fn fac5 = () -> i32 {
  comptime { factorial(5) }
}

fn hello_c_str = () -> &u8 c"Hello, C!"

fn add_generic<T: $type> = (a:T, b:T) -> T a + b;

fn add_i32 = (a: i32, b: i32) -> i32 add_generic::<i32>(a, b)

fn add_3_numbers = (a: i32, b: i32, c: i32) -> i32 add_i32(add_i32(a, b), c)

fn deref<T: $type> = (a: &T) -> T a.*

instantiate deref<i32>
instantiate deref<Foo>